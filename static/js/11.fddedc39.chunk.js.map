{"version":3,"file":"static/js/11.fddedc39.chunk.js","mappings":"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","sources":["LivingRoom/Primitives/CurvedPlane.js","LivingRoom/ImageScreen.js","LivingRoom/Primitives/ArrowPointer.js","LivingRoom/ImageClickableButton.js","LivingRoom/LinkClickableButton.js","LivingRoom/ImageGallery.jsx","LivingRoom/VideoScene.js","LivingRoom/LivingRoom.js"],"sourcesContent":["import * as THREE from 'three'\r\nimport { useMemo } from 'react'\r\n\r\nexport default function CurvedPlane({ width, height, radius, children, ...props }) {\r\n  const { geometry, heightMin, heightMax } = useMemo(() => curvedPlaneGeometry(width, height, radius), [width, height, radius])\r\n\r\n  return (\r\n    <group {...props}>\r\n      <mesh geometry={geometry} receiveShadow castShadow position-z={-heightMax}>\r\n        {children}\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction curvedPlaneGeometry(width = 1, height = 1, radius = 2) {\r\n  const segments = 32\r\n  const segmentsH = segments\r\n  const segmentsV = segments / (width / height) // square\r\n  const geometry = new THREE.PlaneGeometry(width, height, segmentsH, segmentsV)\r\n\r\n  let heightMin = Infinity\r\n  let heightMax = -Infinity\r\n\r\n  const distanceMax = Math.sqrt((width / 2) ** 2 + (height / 2) ** 2)\r\n  radius = Math.max(distanceMax, radius)\r\n\r\n  const position = geometry.attributes.position\r\n  for (let i = 0; i < position.count; i++) {\r\n    const x = position.getX(i)\r\n    const y = position.getY(i)\r\n\r\n    const distance = Math.sqrt(x * x + y * y)\r\n    const height = Math.sqrt(Math.max(radius ** 2 - distance ** 2, 0))\r\n    heightMin = Math.min(height, heightMin)\r\n    heightMax = Math.max(height, heightMax)\r\n    position.setZ(i, height)\r\n  }\r\n\r\n  // geometry.computeVertexNormals()\r\n  // position.needsUpdate = true\r\n\r\n  return { geometry, heightMin, heightMax }\r\n}","import { useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useGLTF, useTexture } from \"@react-three/drei\";\r\nimport { useLoader } from \"@react-three/fiber\";\r\nimport CurvedPlane from \"./Primitives/CurvedPlane\";\r\n\r\n\r\nconst ImageScreen = ({position = [-8,0,0], rotation = [0,-1.64,0], scale = [-6,6,6], srcDir = \"./images/descriptionImages/CafeValvet.png\"})=>\r\n{\r\n    return (\r\n        <>\r\n            <ambientLight intensity={2}></ambientLight>\r\n\r\n            <Screen\r\n                src = {srcDir}\r\n                position={position}\r\n                rotation={rotation}\r\n                scale={scale}></Screen>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ImageScreen;\r\n\r\n\r\nfunction Screen({ src= \"./images/descriptionImages/CafeValvet.png\", rotation, scale, position }) {\r\n  \r\n    const ratio = 16 / 9\r\n    const width = 5\r\n    const radius = 4\r\n    const z = 4\r\n  \r\n    const ScreenTexture = useTexture(\"./images/Coast_View_Paranomic-1.webp\");\r\n\r\n    return (\r\n        <group position={position} scale={scale} rotation={rotation}>\r\n            <CurvedPlane width={width} height={width / 16 * 9} radius={radius}>\r\n                <meshPhongMaterial side={THREE.DoubleSide} map={ScreenTexture} emissive={\"white\"} emissiveMap={ScreenTexture} emissiveIntensity={0.5}/>\r\n            </CurvedPlane>\r\n\r\n        </group>\r\n        \r\n    )\r\n  }","import { useAnimations, useGLTF } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useRef, useEffect } from \"react\";\r\nimport * as THREE from 'three'\r\n\r\nconst ArrowPointer = ({srcDir = \"\"}) => {\r\n    const model = useGLTF(srcDir);\r\n    const animation = useAnimations(model.animations, model.scene);\r\n    return (\r\n        <primitive object={model.scene}>\r\n            <meshBasicMaterial color={\"white\"} emissive={\"red\"} emissiveIntensity={5} side={THREE.DoubleSide} ></meshBasicMaterial>\r\n        </primitive>\r\n    );\r\n}\r\n\r\nexport default ArrowPointer;","import { Html } from \"@react-three/drei\"; //Camera Controls\r\nimport React, { Suspense, useState } from \"react\";\r\nimport ImageScreen from \"./ImageScreen\";\r\nimport Plaque from \"./Primitives/Plague\";\r\nimport ArrowPointer from \"./Primitives/ArrowPointer\";\r\n\r\nconst ImageClickableButton = ({buttonName = \"Click to see Outdoor\", buttonPosition = [-10,0,-5], closeButtonPosition = [8, 12, -12], rotation = [0,-1.64,0], scale = [-6,6,6], imgSrc = \"\"}) => {\r\n    const [opened, setOpened] = useState(false);\r\n    \r\n    return (\r\n        <>\r\n            <mesh position={buttonPosition}>\r\n                {!opened && (\r\n                    <Html>\r\n                        <div className='customButton' onClick={() => setOpened(true)}>{buttonName}</div>\r\n                    </Html>\r\n                )}\r\n                {opened && (\r\n                    <Html position={closeButtonPosition}>\r\n                        <div className='worldSpaceClickableButton' style={{fontSize: \"30px\", zIndex: 1}} onClick={() => setOpened(false)}>X</div>\r\n                    </Html>\r\n                )}\r\n            </mesh>\r\n            {opened && <ImageScreen srcDir={imgSrc} position={buttonPosition} rotation={rotation} scale={scale}></ImageScreen>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ImageClickableButton;\r\n","import { Html, useGLTF, useAnimations } from \"@react-three/drei\"; //Camera Controls\r\nimport React, { useState, useContext, useRef } from \"react\";\r\nimport { StoredData } from \"../Clouds/Context\";\r\n\r\nconst LinkClickableButton = ({buttonName = \"Add Name\", buttonPosition = [-10,0,-5], closeButtonPosition = [8, 12, -12], rotation = [0,-1.64,0], scale = [-6,6,6], imgSrc = \"\", redirName = \"\"})=>\r\n{\r\n    const {data, updateDropPhysics, updateRenderingSpace} = useContext(StoredData);\r\n    return (\r\n        <>\r\n            <mesh position={buttonPosition} onClick={function(){updateRenderingSpace(redirName)}}>\r\n                <Html>\r\n                    <div onClick={function(){\r\n                        updateRenderingSpace(redirName);\r\n                    }} style={{zIndex: 2}}>\r\n                        <h1 className='worldSpaceClickableButton'>{buttonName}</h1>\r\n                    </div> \r\n                </Html>\r\n                {/* <Model /> */}\r\n            </mesh> \r\n        </>\r\n    );\r\n}\r\n\r\nexport default LinkClickableButton;\r\n\r\n\r\nfunction Model(props) {\r\n    const group = useRef()\r\n    const { nodes, materials, animations } = useGLTF('/glb/Homie_Optimized.glb')\r\n    const { actions } = useAnimations(animations, group)\r\n    return (\r\n      <group ref={group} {...props} dispose={null} scale={3}>\r\n        <group name=\"Scene\">\r\n          <mesh\r\n            name=\"connector\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.connector.geometry}\r\n            material={materials.base}\r\n            position={[0, 0.202, -0.015]}\r\n          />\r\n        </group>\r\n      </group>\r\n    )\r\n  }\r\n  \r\nuseGLTF.preload('/glb/Homie_Optimized.glb')","import * as THREE from 'three'\r\nimport { useRef, useState, useEffect } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useCursor,  Image} from '@react-three/drei'\r\nimport { useRoute, useLocation } from 'wouter'\r\nimport { easing } from 'maath'\r\nimport getUuid from 'uuid-by-string'\r\n\r\nconst GOLDENRATIO = 1.61803398875\r\n\r\nvar targetPosition = [0,0,0];\r\n// const pexel = (id) => `https://images.pexels.com/photos/${id}/pexels-photo-${id}.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260`\r\nconst pexel = (id) => `./textures/img${id}.jpg`\r\nconst images = [\r\n  // // Front\r\n  // { position: [0, 0, 1.5], rotation: [0, 0, 0], url: pexel(1103970) },\r\n  // // Back\r\n  // { position: [-0.8, 0, -0.6], rotation: [0, 0, 0], url: pexel(416430) },\r\n  // { position: [0.8, 0, -0.6], rotation: [0, 0, 0], url: pexel(310452) },\r\n  // // Left\r\n  // { position: [-1.75, 0, 0.25], rotation: [0, Math.PI / 2.5, 0], url: pexel(327482) },\r\n  // { position: [-2.15, 0, 1.5], rotation: [0, Math.PI / 2.5, 0], url: pexel(325185) },\r\n  // { position: [-2, 0, 2.75], rotation: [0, Math.PI / 2.5, 0], url: pexel(358574) },\r\n  // // Right\r\n  // { position: [1.75, 0, 0.25], rotation: [0, -Math.PI / 2.5, 0], url: pexel(227675) },\r\n  // { position: [2.15, 0, 1.5], rotation: [0, -Math.PI / 2.5, 0], url: pexel(911738) },\r\n  // { position: [2, 0, 2.75], rotation: [0, -Math.PI / 2.5, 0], url: pexel(1738986) }\r\n    // Front\r\n    { position: [0, 0, 1.5], rotation: [0, 0, 0], url: pexel(3) },\r\n    // Back\r\n    { position: [-0.8, 0, -0.6], rotation: [0, 0, 0], url: pexel(10) },\r\n    { position: [0.8, 0, -0.6], rotation: [0, 0, 0], url: pexel(6) },\r\n    // Left\r\n    { position: [-1.75, 0, 0.25], rotation: [0, Math.PI / 2.5, 0], url: pexel(7) },\r\n    { position: [-2.15, 0, 1.5], rotation: [0, Math.PI / 2.5, 0], url: pexel(6) },\r\n    { position: [-2, 0, 2.75], rotation: [0, Math.PI / 2.5, 0], url: pexel(4) },\r\n    // Right\r\n    { position: [1.75, 0, 0.25], rotation: [0, -Math.PI / 2.5, 0], url: pexel(10) },\r\n    { position: [2.15, 0, 1.5], rotation: [0, -Math.PI / 2.5, 0], url: pexel(7) },\r\n    { position: [2, 0, 2.75], rotation: [0, -Math.PI / 2.5, 0], url: pexel(8) }\r\n]\r\n\r\nconst ImageGallery = ({onClicked = () => {}}) => {\r\n  return (\r\n    <group position={[0, -0.5, 0]}>\r\n      <Frames images={images} onClicked={onClicked}/>\r\n    </group>\r\n  );\r\n}\r\n\r\nexport default ImageGallery;\r\n\r\n\r\nfunction Frames({ images, q = new THREE.Quaternion(), p = new THREE.Vector3(), onClicked = () => {}} ) {\r\n  const ref = useRef();\r\n  const clicked = useRef();\r\n  const [, params] = useRoute('/item/:id');\r\n  const [, setLocation] = useLocation();\r\n  useEffect(() => {\r\n    clicked.current = ref.current.getObjectByName(params?.id);\r\n      if (clicked.current) {\r\n      clicked.current.parent.updateWorldMatrix(true, true)\r\n      clicked.current.parent.localToWorld(p.set(0, GOLDENRATIO / 2, 1.25))\r\n      // clicked.current.parent.getWorldQuaternion(q)\r\n      } else {\r\n      p.set(0, 0, 5.5)\r\n      q.identity()\r\n      }\r\n  })\r\n\r\n  return (\r\n    <group \r\n    ref={ref}\r\n    onClick={(e) => {\r\n      // console.log(e.eventObject.children[0]);\r\n      // console.log(e.eventObject);\r\n      e.stopPropagation();\r\n      e.object.parent.updateWorldMatrix(true, true);\r\n      e.object.parent.localToWorld(new THREE.Vector3(0, GOLDENRATIO / 2, 1.25));\r\n      // onClicked(e.point);\r\n      onClicked(e.point);\r\n      // console.log(\"WHATEVER THIS IS: \" + (e.object ? '/' : '/item/' + e.object.name));\r\n\r\n      // setLocation(clicked.current === e.object ? '/' : '/item/' + e.object.name);\r\n      }}>\r\n      {images.map((props) => <Frame key={props.url} {...props} /> /* prettier-ignore */)}\r\n    </group>\r\n  )\r\n}\r\n\r\n// function Frames({ images, q = new THREE.Quaternion(), p = new THREE.Vector3() }) {\r\n//   const ref = useRef()\r\n//   const clicked = useRef()\r\n//   const [, params] = useRoute('/item/:id')\r\n//   const [, setLocation] = useLocation()\r\n//   useEffect(() => {\r\n//     clicked.current = ref.current.getObjectByName(params?.id)\r\n//     if (clicked.current) {\r\n//       // clicked.current.parent.updateWorldMatrix(true, true)\r\n//       clicked.current.parent.localToWorld(p.set(0, GOLDENRATIO / 2, 1.25))\r\n//       // clicked.current.parent.getWorldQuaternion(q)\r\n//     } else {\r\n//       p.set(0, 0, 5.5)\r\n//       q.identity()\r\n//     }\r\n//   })\r\n//   useFrame((state, dt) => {\r\n//     easing.damp3(state.camera.position, p, 0.4, dt)\r\n//     easing.dampQ(state.camera.quaternion, q, 0.4, dt)\r\n//   })\r\n\r\n//   return (\r\n//     <group\r\n//       ref={ref}\r\n//       onClick={(e) => (e.stopPropagation(), setLocation(clicked.current === e.object ? '/' : '/item/' + e.object.name)) }\r\n//       onPointerMissed={() => setLocation('/')}>\r\n//       {images.map((props) => <Frame key={props.url} {...props} /> /* prettier-ignore */)}\r\n//     </group>\r\n//   )\r\n// }\r\n\r\nfunction Frame({ url, c = new THREE.Color(), ...props }) {\r\n  const image = useRef()\r\n  const frame = useRef()\r\n  const [, params] = useRoute('/item/:id')\r\n  const [hovered, hover] = useState(false)\r\n  const name = getUuid(url)\r\n  const isActive = params?.id === name\r\n  useCursor(hovered)\r\n  useFrame((state, dt) => {\r\n    easing.damp3(image.current.scale, [0.85 * (!isActive && hovered ? 0.85 : 1), 0.9 * (!isActive && hovered ? 0.905 : 1), 1], 0.1, dt)\r\n    easing.dampC(frame.current.material.color, hovered ? 'orange' : 'white', 0.1, dt)\r\n  })\r\n  return (\r\n    <group {...props}>\r\n      <mesh\r\n        name={name}\r\n        onPointerOver={(e) => (e.stopPropagation(), hover(true))}\r\n        onPointerOut={() => hover(false)}\r\n        scale={[1, GOLDENRATIO, 0.05]}\r\n        position={[0, GOLDENRATIO / 2, 0]}>\r\n        <boxGeometry />\r\n        <meshStandardMaterial color=\"#151515\" metalness={0.5} roughness={0.5} envMapIntensity={2} />\r\n        <mesh ref={frame} raycast={() => null} scale={[0.9, 0.93, 0.9]} position={[0, 0, 0.2]}>\r\n          <boxGeometry />\r\n          <meshBasicMaterial toneMapped={false} fog={false} />\r\n        </mesh>\r\n        <Image raycast={() => null} ref={image} position={[0, 0, 0.7]} url={url} />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n","import * as THREE from 'three';\r\nimport { OrbitControls, useTexture, Html, useGLTF, useAnimations, Float} from \"@react-three/drei\"; //Camera Controls\r\nimport { useFrame } from '@react-three/fiber';\r\nimport React, { Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport PhysicsParticles from './PhysicsParticles';\r\nimport ImageClickableButton from './ImageClickableButton';\r\nimport VideoClickableButton from './VideoClickableButton';\r\nimport ArrowPointer from './Primitives/ArrowPointer';\r\nimport LinkClickableButton from './LinkClickableButton';\r\nimport ImageGallery from './ImageGallery';\r\nimport { StoredData } from \"../Clouds/Context\";\r\n\r\n//Code in here is meant for only threejs/webgl scene.\r\n\r\n//some control variables\r\nvar openedWindow = false;\r\nconst instructions = document.getElementById('instructions');\r\nconst VideoScene = ()=>\r\n{\r\n    const [rotation, setRotation] = useState(0);\r\n    // const [data, setData] = useState(false);\r\n    //references\r\n    const videoSphereRef = useRef();\r\n    const videoChangeRate = 0.5;\r\n    const videoPopUpNodeRange = 2;\r\n    const [showCafeButton, setShowCafeButton]= useState(false);\r\n    const [showCafeButton2, setShowCafeButton2]= useState(false);\r\n    const [showPalaceButton, setShowPalaceButton]= useState(false);\r\n    const [showPhysics, setShowPhysics]= useState(true);\r\n    const [arrowPos, setArrowPos] = useState(0);\r\n    const [modelAction, setModelAction] = useState(\"Waiting\");\r\n    \r\n    const livingRoomTexture = useTexture(\"./images/LivingRoom.png\");\r\n\r\n    const useOrbit = useRef();\r\n\r\n    const AIHoverOver = () => {\r\n        document.body.style.cursor = \"pointer\";\r\n        setModelAction(\"PortalOpen\");\r\n      };\r\n    \r\n      const AIHoverLeave = () => {\r\n        document.body.style.cursor = \"auto\";\r\n        setModelAction(\"Waiting\");\r\n      };\r\n    \r\n      const AIOnclick = () => {\r\n        console.log(\"AI Clicked\");\r\n        var voiceIdx = Math.floor(Math.random() * 5) + 1;\r\n        var audio = new Audio(`./audio/speech${voiceIdx}.ogg`);\r\n        audio.play();\r\n    \r\n        const aiFrame = document.getElementById(\"aiFrame\");\r\n        const aiHolder = document.getElementById(\"aiHolder\");\r\n        const aiClose = document.getElementById(\"aiClose\");\r\n    \r\n        aiHolder.style.visibility = \"visible\";\r\n        aiHolder.style.pointerEvents = \"all\";\r\n        //ytVideoElement.src = \"https://www.youtube.com/embed/jvHQO6-WOJg?si=a9XZm9RdtefTGyd5&amp;\";\r\n        aiFrame.src =\r\n          \"https://property-ai.deo.ooo/db026e9b-01e5-4bf9-9553-e0f6b0ee8093\";\r\n        aiFrame.allow = \"autoplay; clipboard-read; clipboard-write\";\r\n        aiClose.addEventListener(\"click\", () => {\r\n          aiHolder.style.visibility = \"hidden\";\r\n          aiHolder.style.pointerEvents = \"none\";\r\n          aiFrame.removeEventListener(\"click\", this);\r\n        });\r\n      };\r\n    \r\n\r\nconst { data } = useContext(StoredData);\r\n\r\nuseEffect(() => {\r\n\r\n    useOrbit.current.saveState();\r\n\r\n}, []);\r\n\r\nconst ReturnPositionBtn = ({buttonName = 'Back Btn', buttonPosition = [0, 0, 0]}) => {\r\n    return (\r\n    <mesh position={buttonPosition} scale={2}>\r\n        <Html>\r\n            <div onClick={function(){\r\n                        if (data.RenderSpace === \"LivingRoom\"){\r\n                            useOrbit.current.reset();\r\n                            setPosition([0, 2, 0]);\r\n                        };\r\n            }} style={{zIndex: 2}}>\r\n                <h1 className='worldSpaceClickableButton'>{buttonName}</h1>\r\n            </div> \r\n        </Html>\r\n    </mesh>\r\n    )\r\n}\r\n\r\nconst [position, setPosition] = useState([0,2,0]);\r\nvar lastPosition = useState([0,0,0]);\r\nvar ogPosition = new THREE.Vector3([0, 0, 0]);\r\n\r\nreturn (\r\n        <>\r\n            <OrbitControls enableZoom={false} enablePan={false} target={position} maxDistance={2} ref={useOrbit}></OrbitControls>\r\n            {/* <axesHelper></axesHelper> */}\r\n            <Suspense fallback={\r\n                <>\r\n                    <mesh>\r\n                        <boxGeometry></boxGeometry>\r\n                        <meshBasicMaterial color=\"red\"></meshBasicMaterial>\r\n                    </mesh>\r\n                </>\r\n            }>\r\n                <mesh scale={[-90,90,90]} ref={videoSphereRef}>\r\n                    <sphereGeometry></sphereGeometry>\r\n                    <meshBasicMaterial \r\n                        color=\"white\" \r\n                        side={THREE.DoubleSide} \r\n                        map={livingRoomTexture}>\r\n                        </meshBasicMaterial>\r\n                </mesh>\r\n            </Suspense>\r\n            {/* A Test button for the cafe */}\r\n            {/* {showCafeButton && (<ImageClickableButton buttonName='Cafe Valvet' imgSrc='./images/descriptionImages/CafeValvet.png'></ImageClickableButton>)}\r\n            {showCafeButton2 && (<ImageClickableButton buttonName='Cafe Muren' imgSrc='./images/descriptionImages/CafeMuren.png' buttonPosition={[5,3,20]} closeButtonPosition={[-8, 12, 12]} rotation={[0, Math.PI * 0.5,0]}></ImageClickableButton>)}\r\n            {showPalaceButton && (<VideoClickableButton src=\"./videos/SDW.mp4\"></VideoClickableButton>)} */}\r\n            {/* <VideoClickableButton src='./videos/Suitetogether_walkthrough.mp4' newPos={[5, 2.5, 10]} /> */}\r\n            <ImageClickableButton buttonName='Seaside View' buttonPosition={[20,0,0]} imgSrc='./images/buttons/eye.png' rotation={[0, Math.PI * 0.5, 0]}></ImageClickableButton>\r\n            <LinkClickableButton imgSrc='./images/buttons/back to clouds.png' buttonName='<' buttonPosition={[-7,4,-7]} redirName='CloudSpace'></LinkClickableButton>\r\n            <ReturnPositionBtn buttonName='X' buttonPosition={[-10,0.5,0]} />\r\n            {/* <StoredData.Provider value={{data, setData}}>\r\n                {showPhysics && (\r\n                    <PhysicsParticles></PhysicsParticles>\r\n                )}\r\n            </StoredData.Provider> */}\r\n            <group position={[-10,2,0]} rotation={[0, Math.PI * 0.5, 0]}>\r\n                <ImageGallery onClicked={(newPosition)=> {\r\n                    setPosition([newPosition.x, 2.2, newPosition.z]);\r\n                    console.log(newPosition);\r\n                    \r\n                }}>\r\n                </ImageGallery>\r\n            </group>\r\n            {/* <group position={[-0, 3, -20]}>\r\n                <Boy />\r\n            </group> */}\r\n            <group position={[-3.5, 2, 5]} rotation={[0, Math.PI * 0.5, 0]} scale={1.5}>\r\n                <ArrowPointer srcDir=\"./Models/Description2.glb\"></ArrowPointer>\r\n            </group>\r\n            <group\r\n                onPointerOver={AIHoverOver}\r\n                onPointerLeave={AIHoverLeave}\r\n                onClick={AIOnclick}\r\n                scale={2}\r\n                position={[0, 2.6, -3]}\r\n                rotation={[0, 0, 0]}\r\n            >\r\n            <Float\r\n            floatIntensity={2}\r\n            speed={2}>\r\n            <ArrowPointer\r\n                className=\"aiAgentModel\"\r\n                srcDir=\"./glb/Homie_Jath.glb\"\r\n                animationName={modelAction}\r\n            ></ArrowPointer>\r\n            </Float>\r\n            </group>\r\n\r\n            {/* <group\r\n                onPointerOver={AIHoverOver}\r\n                onPointerLeave={AIHoverLeave}\r\n                animationName={modelAction}\r\n                onClick={AIOnclick}\r\n                position={[-3, 3.25, -0.6]}\r\n                rotation={[-3, 3, 3]}\r\n            >\r\n            <Float\r\n            floatIntensity={2}\r\n            speed={2}>\r\n            <ArrowPointer\r\n                className=\"aiAgentModel\"\r\n                srcDir=\"./Models/book.glb\"\r\n            ></ArrowPointer>\r\n            </Float>\r\n            </group> */}\r\n            <ambientLight intensity={1.5} />\r\n            <directionalLight intensity={3}/>\r\n            {/* <group position={[0, -6, -20]} rotation={[0, rotation, 0]}>\r\n                <ArrowPointer srcDir='./Models/hologram.glb'></ArrowPointer>\r\n            </group> */}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default VideoScene;\r\n\r\n\r\nfunction Boy({ props, scrollState }) {\r\n    const group = useRef()\r\n    const { nodes, materials, animations } = useGLTF('/glb/boy_float.glb')\r\n    const { actions, ref, names } = useAnimations(animations, group)\r\n  \r\n    function playAnims(actionArray) {\r\n      actions[actionArray].timeScale = 1.2;\r\n      actions[actionArray].reset().fadeIn(0.5).play();\r\n    }\r\n    //  useFrame(() => {\r\n    //   group.current.rotation.x = scrollState.progress * Math.PI * 1\r\n    // })\r\n  \r\n    useEffect(() => {\r\n      names.forEach(playAnims)\r\n    }, []);\r\n    return (\r\n      <group ref={group} {...props} position={[2, -2.5, 10]} dispose={null}>\r\n        <group name=\"Scene\">\r\n          <group name=\"BezierCircle\">\r\n            <group name=\"Armature\" rotation={[Math.PI / 2, 0, 0]} scale={0.025}>\r\n              <skinnedMesh\r\n                name=\"Ch09\"\r\n                geometry={nodes.Ch09.geometry}\r\n                material={materials['Ch09_body.001']}\r\n                skeleton={nodes.Ch09.skeleton}\r\n              />\r\n              <primitive object={nodes.mixamorig6Hips} />\r\n            </group>\r\n          </group>\r\n        </group>\r\n      </group>\r\n    )\r\n  }\r\n\r\n  useGLTF.preload('/glb/boy_float.glb')","import { Canvas } from \"@react-three/fiber\";\r\nimport React from 'react';\r\nimport VideoScene from \"./VideoScene\";\r\n\r\nconst LivingRoom = () => \r\n{\r\n    return (\r\n        <>\r\n            <Canvas\r\n                camera={{\r\n                    position: [2,3,-2],\r\n                    fov: 60,\r\n                    near: 0.1,\r\n                    far: 100,\r\n                    zoom: 0.7,\r\n                }}>\r\n                <VideoScene></VideoScene>\r\n            </Canvas>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LivingRoom;"],"names":["CurvedPlane","_ref","width","height","radius","children","props","geometry","heightMin","heightMax","useMemo","arguments","length","undefined","segments","segmentsH","segmentsV","THREE","Infinity","distanceMax","Math","sqrt","max","position","attributes","i","count","x","getX","y","getY","distance","min","setZ","curvedPlaneGeometry","_jsx","receiveShadow","castShadow","rotation","scale","srcDir","_jsxs","_Fragment","intensity","Screen","src","_ref2","ScreenTexture","useTexture","side","map","emissive","emissiveMap","emissiveIntensity","model","useGLTF","useAnimations","animations","scene","object","color","buttonName","buttonPosition","closeButtonPosition","imgSrc","opened","setOpened","useState","Html","className","onClick","style","fontSize","zIndex","ImageScreen","redirName","data","updateDropPhysics","updateRenderingSpace","useContext","StoredData","preload","GOLDENRATIO","pexel","id","concat","images","url","PI","onClicked","Frames","q","p","ref","useRef","clicked","params","useRoute","setLocation","useLocation","useEffect","current","getObjectByName","parent","updateWorldMatrix","localToWorld","set","identity","e","stopPropagation","point","Frame","_ref3","c","image","frame","hovered","hover","name","getUuid","isActive","useCursor","useFrame","state","dt","easing","damp3","dampC","material","onPointerOver","onPointerOut","metalness","roughness","envMapIntensity","raycast","toneMapped","fog","Image","document","getElementById","VideoScene","setRotation","videoSphereRef","showCafeButton","setShowCafeButton","showCafeButton2","setShowCafeButton2","showPalaceButton","setShowPalaceButton","showPhysics","setShowPhysics","arrowPos","setArrowPos","modelAction","setModelAction","livingRoomTexture","useOrbit","saveState","ReturnPositionBtn","RenderSpace","reset","setPosition","OrbitControls","enableZoom","enablePan","target","maxDistance","Suspense","fallback","ImageClickableButton","LinkClickableButton","ImageGallery","newPosition","z","console","log","ArrowPointer","AIHoverOver","body","cursor","onPointerLeave","AIHoverLeave","AIOnclick","voiceIdx","floor","random","Audio","play","aiFrame","aiHolder","aiClose","visibility","pointerEvents","allow","addEventListener","removeEventListener","Float","floatIntensity","speed","animationName","LivingRoom","Canvas","camera","fov","near","far","zoom"],"sourceRoot":""}
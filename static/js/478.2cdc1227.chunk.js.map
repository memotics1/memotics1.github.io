{"version":3,"file":"static/js/478.2cdc1227.chunk.js","mappings":"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","sources":["FloatBoy.jsx","../node_modules/@react-three/drei/core/useAnimations.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react'\r\nimport { useThree } from '@react-three/fiber'\r\nimport { Loader, Float, useGLTF, PresentationControls, Environment, Html,useAnimations } from '@react-three/drei'\r\nimport { GlobalCanvas, ScrollScene, UseCanvas, SmoothScrollbar } from '@14islands/r3f-scroll-rig'\r\nimport { BodyCopy, Headline, Subtitle } from \"./Text\";\r\nimport { useFrame } from '@react-three/fiber'\r\n// Need to start preloading assets to make sure Loader\r\n// is not removed before the canvas children mounts\r\nuseGLTF.preload('/glb/watch-v1.glb')\r\n\r\n\r\n\r\nconst FloatBoy = () => {\r\n  const el = useRef()\r\n  return (\r\n    <section>\r\n      <div ref={el} className=\"Placeholder ScrollScene\"></div>\r\n      <UseCanvas>\r\n        <ScrollScene track={el}>{(props) => <Boy {...props} />}</ScrollScene>\r\n        </UseCanvas>\r\n    </section>\r\n  )\r\n}\r\n\r\nfunction SpinningBoxWebGL({ scale, scrollState }) {\r\n  const mesh = useRef()\r\n  useFrame(() => {\r\n    mesh.current.rotation.y = scrollState.progress * Math.PI * 2\r\n  })\r\n  return (\r\n    <group scale={scale.xy.min() * 0.5}>\r\n      <mesh ref={mesh}>\r\n        <boxGeometry />\r\n        <meshNormalMaterial />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\n\r\n\r\nfunction Boy({props,scrollState}) {\r\nconst group = useRef()\r\nconst { nodes, materials, animations } = useGLTF('/glb/boy_float.glb')\r\nconst { actions, ref, names } = useAnimations(animations, group)\r\n\r\nfunction playAnims(actionArray) {\r\n  actions[actionArray].timeScale = 1.2;\r\n  actions[actionArray].reset().fadeIn(0.5).play();\r\n}\r\n  //  useFrame(() => {\r\n  //   group.current.rotation.x = scrollState.progress * Math.PI * 1\r\n  // })\r\n\r\nuseEffect(() => {\r\n  names.forEach(playAnims)\r\n}, []);\r\nreturn (\r\n  <group ref={group} {...props}  position={[2, -2.5, 10]}dispose={null}>\r\n    <group name=\"Scene\">\r\n      <group name=\"BezierCircle\">\r\n        <group name=\"Armature\" rotation={[Math.PI / 2, 0, 0]} scale={0.025}>\r\n        <skinnedMesh\r\n            name=\"Ch09\"\r\n            geometry={nodes.Ch09.geometry}\r\n            material={materials['Ch09_body.001']}\r\n            skeleton={nodes.Ch09.skeleton}\r\n          />\r\n          <primitive object={nodes.mixamorig6Hips} />\r\n        </group>\r\n      </group>\r\n    </group>\r\n  </group>\r\n)\r\n}\r\n\r\nexport default FloatBoy;\r\nuseGLTF.preload('/glb/boy_float.glb')","import * as React from 'react';\nimport { Object3D, AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  const ref = React.useRef();\n  const [actualRef] = React.useState(() => root ? root instanceof Object3D ? {\n    current: root\n  } : root : ref);\n  // eslint-disable-next-line prettier/prettier\n  const [mixer] = React.useState(() => new AnimationMixer(undefined));\n  React.useLayoutEffect(() => {\n    if (root) actualRef.current = root instanceof Object3D ? root : root.current;\n    mixer._root = actualRef.current;\n  });\n  const lazyActions = React.useRef({});\n  const api = React.useMemo(() => {\n    const actions = {};\n    clips.forEach(clip => Object.defineProperty(actions, clip.name, {\n      enumerable: true,\n      get() {\n        if (actualRef.current) {\n          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));\n        }\n      },\n      configurable: true\n    }));\n    return {\n      ref: actualRef,\n      clips,\n      actions,\n      names: clips.map(c => c.name),\n      mixer\n    };\n  }, [clips]);\n  useFrame((state, delta) => mixer.update(delta));\n  React.useEffect(() => {\n    const currentRoot = actualRef.current;\n    return () => {\n      // Clean up only when clips change, wipe out lazy actions and uncache clips\n      lazyActions.current = {};\n      mixer.stopAllAction();\n      Object.values(api.actions).forEach(action => {\n        if (currentRoot) {\n          mixer.uncacheAction(action, currentRoot);\n        }\n      });\n    };\n  }, [clips]);\n  return api;\n}\n\nexport { useAnimations };\n"],"names":["useGLTF","preload","Boy","_ref2","props","scrollState","group","useRef","nodes","materials","animations","actions","ref","names","clips","root","React","actualRef","Object3D","current","mixer","AnimationMixer","undefined","_root","lazyActions","api","forEach","clip","Object","defineProperty","name","enumerable","get","clipAction","configurable","map","c","useFrame","state","delta","update","currentRoot","stopAllAction","values","action","uncacheAction","useAnimations","playAnims","actionArray","timeScale","reset","fadeIn","play","useEffect","_jsx","position","dispose","children","_jsxs","rotation","Math","PI","scale","geometry","Ch09","material","skeleton","object","mixamorig6Hips","FloatBoy","el","className","UseCanvas","ScrollScene","track"],"sourceRoot":""}